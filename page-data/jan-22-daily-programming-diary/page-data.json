{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/jan-22-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/jan-22-daily-programming-diary","title":"Jan 22 - Daily Programming Diary","date":"22.01.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jan 22 - Daily Programming Diary\",\n  \"date\": \"2021-01-22T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"15:00\"), mdx(\"p\", null, \"So I read the first few pages of the book and it was so difficult that I don't even have the words. Now, I'm back on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/featured/card/january-leetcoding-challenge-2021/582/week-4-january-22nd-january-28th/3613/\"\n  }), \"Leetcode challenge\"), \".\\nThe first approach I thought about was to store the frequencies and then sort the arrays to check if they are equal but then the letters which are different will not be available.\"), mdx(\"p\", null, \"Okay, some modifications. The only situation where the modifications are possible if the letters being used are the same, so the letters with zero frequencies in one string but present in other will definitely be false.\"), mdx(\"p\", null, \"And it worked!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=determine-if-two-strings-are-close.cpp\"\n  }), \"bool closeStrings(string word1, string word2) {\\n    if (word1.length() != word2.length()) return false;\\n\\n    vector<int> arr1(26, 0);\\n    vector<int> arr2(26, 0);\\n\\n    for (int i = 0; i < word1.length(); i++) {\\n        arr1[word1[i] - 'a']++;\\n        arr2[word2[i] - 'a']++;\\n    }\\n\\n    for (int i = 0; i < 26; i++) {\\n        if ((arr1[i] > 0 && arr2[i] == 0) || (arr1[i] == 0 && arr2[i] > 0))\\n            return false;\\n    }\\n\\n    sort(arr1.begin(), arr1.end());\\n    sort(arr2.begin(), arr2.end());\\n\\n    return arr1 == arr2;\\n}\\n\")), mdx(\"p\", null, \"Time complexity \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" is the length of the strings. And space complexity is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(1)\"), \" since I'm sing two vectors of size 26 each.\"), mdx(\"h5\", null, \"15:30\"), mdx(\"p\", null, \"I'll work on something for Raahee today. Maybe fix the community page with relative time, that would be so interesting.\"), mdx(\"h5\", null, \"19:00\"), mdx(\"p\", null, \"No, I didn't take a break.\\nSo I started working on the profile feature and the first thing that I had to decide was whether to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context\"), \" API or redux. I decided to go with redux since it will help in setting up the boilerplate as well as offer better performance when compared to the plain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext()\"), \".\\nThe next roadblock was deciding between simple \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-redux\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-toolkit\"), \". I decided to go with the toolkit since it saves a large amount of time that goes into writing reducers and actions by hand. \"), mdx(\"p\", null, \"Now, time for a story.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I was trying to rebase the branch on which I was working and I thought that it was done, but after working for approximately 2 hours, when I had to commit, I realized that I was still working in the rebase. Now I did what a normal person would do. Search on stack overflow and ran the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git rebase --abort\"), \" and BAM!! All my changes are lost.\\nAfter refactoring the entire code base and integrating redux for user login and making the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<PrivateRoute/>\"), \", I'm back to square one. It's like all of it happened in my dream.\")), mdx(\"p\", null, \"So I started panicking and reverted the head, and now I'm behind than what I had a moment ago \\uD83E\\uDD26\\u200D\\u2642\\uFE0F\"), mdx(\"p\", null, \"Now was the time to quickly code everything from memory and took me around 80 minutes to code everything. Now, time for the commit!\"), mdx(\"h5\", null, \"22:00\"), mdx(\"p\", null, \"Working on the small changes and finally pushing users in the production DB. Have hit a major roadblock because of having to redo the blogs. I don't even know what to say. \"), mdx(\"h5\", null, \"23:40\"), mdx(\"p\", null, \"I did complete rewriting 3 blogs but now I should sleep\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"*\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"yawns...\"), \" Bye!\")), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode January Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Raahee\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"15:00 So I read the first few pages of the book and it was so difficult that I don't even have the words. Now, I'm back on the  Leetcodeâ€¦","timeToRead":2,"banner":null}},"pageContext":{"slug":"/jan-22-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}