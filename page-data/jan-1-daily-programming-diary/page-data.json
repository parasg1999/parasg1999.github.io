{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/jan-1-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/jan-1-daily-programming-diary","title":"Jan 1 - Daily Programming Diary","date":"01.01.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jan 1 - Daily Programming Diary\",\n  \"date\": \"2021-01-01T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"11:50\"), mdx(\"p\", null, \"Woke up on time today (really!), and I thought \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"It's new year, let's build some habits.\\\"\"), \". I went ahead and completed the blog on Arch installation. Feels like a milestone to be honest. I mean it's great to have someone who's constantly asking you to complete a task.\"), mdx(\"p\", null, \"I also decided to go ahead and start this blog as my daily programming journal. I think only I can hold myself accountable.\"), mdx(\"h5\", null, \"12:50\"), mdx(\"p\", null, \"Installed Go. Wow the internet seems to want me to work today. xD\"), mdx(\"h5\", null, \"14:06\"), mdx(\"p\", null, \"Just completed the Leetcode January Challenge \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/featured/card/january-leetcoding-challenge-2021/579/week-1-january-1st-january-7th/3589/\"\n  }), \"Day 1\"), \".\\nAlthought the problem seemed a bit challenging, I used hash table to store the first element of each piece with the repective vector. When I encounter the first number of a piece in array, I fetch the array and compare till the piece finishes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"bool canFormArray(vector<int>& arr, vector<vector<int>>& pieces) {\\n        unordered_map< int, vector<int> > umap;\\n        for(int i=0; i< pieces.size(); i++) {\\n            umap[pieces[i][0]] = pieces[i];\\n        }\\n        \\n        for(int i=0; i<arr.size();) {\\n            if (umap.find(arr[i]) == umap.end()) {   \\n                return false;\\n            } else {\\n                for(int j=0; j<umap[arr[i]].size(); j++) {\\n                    if(arr[i+j] == umap[arr[i]][j]) {\\n                        \\n                    } else {\\n                        return false;\\n                    }\\n                }\\n                i+=umap[arr[i]].size();\\n            }\\n        }\\n        \\n        return true;\\n    }\\n\")), mdx(\"p\", null, \"The time complexity is O(n) even with the nested loop, and the space complexity is also O(n).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Optimization? Trade-off!\"), \": The hash table could be eliminated and sorting implemented which would take O(nlogn) time and O(1) space.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Break!\")), mdx(\"h5\", null, \"15:16\"), mdx(\"p\", null, \"Helped Deepesh install arch on his PC, and failed miserably. I still don't know what went wrong. \\uD83E\\uDD26\\u200D\\u2642\\uFE0F\"), mdx(\"h5\", null, \"17:14\"), mdx(\"p\", null, \"Okay, I'm back. Getting started with Codechef long challenge. This time they have 3 divisions and I feel like it's not really worth the effort to solve these questions, but you know I will probably get better questions next month.\\nI'll just put the questions that I was able to solve today since it's a live contest and I don't want codechef to ban me. Oh I have an idea, I'll post the submission IDs and codechef will deny access until the contest ends. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"**pats on back!\")), mdx(\"p\", null, \"Today's Questions:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Problem \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.codechef.com/JAN21C/problems/DIVTHREE\"\n  }), \"DIVTHREE\"), \" -> Solution \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.codechef.com/viewsolution/41008830\"\n  }), \"41008830\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Problem \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.codechef.com/JAN21C/problems/DECODEIT\"\n  }), \"DECODEIT\"), \" -> Solution \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.codechef.com/viewsolution/41013204\"\n  }), \"41013204\"), mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Wow this question was not difficult in itself but it was hard to implement. The ASCII conversion and substring had me occupied for a while.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Problem \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.codechef.com/JAN21C/problems/FAIRELCT\"\n  }), \"FAIRELCT\"), \" -> Solution \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.codechef.com/viewsolution/41015617\"\n  }), \"41015617\"))), mdx(\"h5\", null, \"20:00\"), mdx(\"p\", null, \"I finally got around to working on the last task of the day. I'm exhausted but I thought, if not anything else, atleast I should start making sense of the documentation.\\nDecided to write the traditional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Hello World!\"), \" program and test stuff out.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main // For grouping functions\\n\\nimport \\\"fmt\\\" // Package for formatting text\\n\\nfunc main() {\\n    fmt.Println(\\\"Hello World!\\\"); // For printing\\n}\\n\")), mdx(\"p\", null, \"Weird things:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It's a lot like Java, I mean packages? I don't even remember how they work \\uD83E\\uDD26\\u200D\\u2642\\uFE0F\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The strings can only work with \\\"double quotes\\\". I KNOW! Judging too harshly? Coming from JavaScript with the template strings and what not, it's a bit inconvinient.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And what is this with the func keyword\")), mdx(\"p\", null, \"For what it's worth, it wasn't a complete disaster of a day. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Godspeed\"), \".\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Break\")), mdx(\"p\", null, \"Gonna watch a movie now, and probably work on the Raahee report feature later. Hope I sleep on time today.\"), mdx(\"h6\", null, \"Later!\"), mdx(\"h5\", null, \"00:10\"), mdx(\"p\", null, \"Started working on Raahee Reported content feature. Really tired today so entire focus on functionality right now!\"), mdx(\"h5\", null, \"00:40\"), mdx(\"p\", null, \"Had to set up the project quite a lot, the small issues that projects have with dependencies. I just wanna sleep now! Anyway, I completed the data and display, just have to use it tomorrow to make a nice UI. For now, good night!  \"), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Go\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode January Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Codechef Long Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog \")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"11:50 Woke up on time today (really!), and I thought  \"It's new year, let's build some habits.\" . I went ahead and completed the blog on…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/jan-1-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}