{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/jan-9-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/jan-9-daily-programming-diary","title":"Jan 9 - Daily Programming Diary","date":"09.01.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jan 9 - Daily Programming Diary\",\n  \"date\": \"2021-01-09T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"12:30\"), mdx(\"p\", null, \"Excited for the Crio event today. I have no idea what to expect and building a portfolio is probably the last thing that I want to do right now.\\nJust signed up for Adsense and it was tricky to modify the SEO component to integrate the script. Phew!\"), mdx(\"p\", null, \"It's almost 13:30 and the new Leetcode challenge is about to be posted. Today's challenge is...drum roll please...\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/featured/card/january-leetcoding-challenge-2021/580/week-2-january-8th-january-14th/3598/\"\n  }), \"Word Ladder\"), \" \"), mdx(\"h5\", null, \"14:50\"), mdx(\"p\", null, \"Wow, a graph question that took so much time. But I'm glad I was able to solve it. Pretty sure there could be a better approach but it was the best I could do. It really helped putting everything on a paper to get the idea of how the whole thing works.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Approach :\"), \"\\nStart from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"beginWord\"), \" and generate the possible conversions from that by changing a letter. So \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mad\"), \" can become \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*ad\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"m*d\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ma*\"), \". Whatever of these words exist in the original list but we haven't visited, we put them in a queue.\\nAnd do the same thing till we reach the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"endWord\"), \", incrementing the counter each time queue empties.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=word-ladder.cpp\"\n  }), \"vector<string> getNeighbors(string str) {\\n    vector<string> v;\\n    for (int i = 0; i < str.length(); i++) {\\n        char org = str[i];\\n        for (int j = 0; j < 26; j++) {\\n            str[i] = j + 'a';\\n            v.push_back(str);\\n        }\\n        str[i] = org;\\n    }\\n    return v;\\n}\\n\\nint ladderLength(string beginWord, string endWord, vector<string> &wordList) {\\n    queue<string> q;                                           // Keep track of neighbors\\n    unordered_set<string> s(wordList.begin(), wordList.end()); // O(1)\\n\\n    if (s.find(endWord) == s.end()) return 0; // end word not in set\\n\\n    s.erase(beginWord); // same word twice? (Noop)\\n    q.push(beginWord);  // Initial queue\\n    int trans = 0;      // Level in BFS\\n\\n    while (!q.empty()) {\\n        trans++;\\n        int qSize = q.size(); // Initial queue size\\n        for (int i = 0; i < qSize; i++) {\\n            string currWord = q.front();\\n            q.pop();          // Remove from queue (black)\\n            if (currWord == endWord) return trans;\\n            vector<string> v = getNeighbors(currWord);\\n            for (int m = 0; m < v.size(); m++) {\\n                if (s.find(v[m]) != s.end()) {  // If not exists\\n                    s.erase(v[m]);  // Remove from set (white)\\n                    q.push(v[m]);   // Add to queue (grey)\\n                }\\n            }\\n        }\\n    }\\n    return 0; // If couldn't reach endWord\\n}\\n\")), mdx(\"p\", null, \"The time complexity for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(26 * M^2 * N)\"), \" where M is the length of each word, and N is the number of words. So asymptotically it is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(M^2 * N)\"), \" and space complexity \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(M * N)\"), \" for the word set.\"), mdx(\"p\", null, \"I am not sure I want to implement this code in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Go\"), \". Yeah, maybe some other time.\"), mdx(\"h5\", null, \"17:30\"), mdx(\"p\", null, \"Have been thinking about some open source contributions, but every time there's the same issue of not being able to find a project. So I thought I could use my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<HideContent />\"), \" component and make it a standalone library with some cool features like preprocessing the input and encrypting the password with firebase or custom API. \"), mdx(\"h5\", null, \"19:30\"), mdx(\"p\", null, \"Just attended the Crio Winter of Doing event.\\nSo what I understood from there is that there are some modules that need to be completed. The thing is that I already know a lot of that stuff but I have to go through all those modules if I want to process to stage 2 which is frustrating.\"), mdx(\"p\", null, \"I started with the HTTP Module and they are teaching about reading request and response objects from Chrome Developer Tools. Then concepts about HTTP Methods (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POST\"), \", ...)\"), mdx(\"p\", null, \"Will continue tomorrow.\"), mdx(\"h5\", null, \"22:30\"), mdx(\"p\", null, \"Created some issues on GitHub in React repository and talked about setting up own server. Guess the downtime was a good thing! \\uD83D\\uDE09\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Still have to decide if we should use PostgreSQL or MongoDB, Node.js or nestjs.  Always wanted to work on back-end. Yay!\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Bye! Been a long time since I wrote like this.\")), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Go\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode January Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Raahee (Just attended the meeting)\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"12:30 Excited for the Crio event today. I have no idea what to expect and building a portfolio is probably the last thing that I want to doâ€¦","timeToRead":2,"banner":null}},"pageContext":{"slug":"/jan-9-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}