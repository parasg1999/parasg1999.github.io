{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/april-1-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/april-1-daily-programming-diary","title":"April 1 - Daily Programming Diary","date":"01.04.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"April 1 - Daily Programming Diary\",\n  \"date\": \"2021-04-01T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"17:00\"), mdx(\"p\", null, \"Wow, I've been inactive! Have put on some weight as well but motivated to start this again. It's a new month so let's go with Leetcode \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/featured/card/april-leetcoding-challenge-2021/593/week-1-april-1st-april-7th/3693/\"\n  }), \"Question of the day\"), \".\\nThe question is to check whether the Linked List is a palindrome.\"), mdx(\"p\", null, \"The first approach is to push everything in stack and then iterate over the list again to check if the reverse of the list matches with the original.\"), mdx(\"p\", null, \"I've been rusty and I think the best way to reach that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"follow up\\\"\"), \" to do it in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" time and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(1)\"), \" space, is to first implement this approach and think what can be improved.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=palindrome-linked-list-using-stack.cpp\"\n  }), \"bool isPalindrome(ListNode *head) {\\n    stack<int> s;\\n    ListNode *temp = head;\\n\\n    while (temp) {\\n        s.push(temp->val);\\n        temp = temp->next;\\n    }\\n\\n    while (head) {\\n        if (s.top() != head->val)\\n            return false;\\n\\n        s.pop();\\n        head = head->next;\\n    }\\n\\n    return true;\\n}\\n\")), mdx(\"p\", null, \"The above method has time and space complexity both as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \".\"), mdx(\"h5\", null, \"17:30\"), mdx(\"p\", null, \"The next approach is to reverse the 2nd half of the list, and the check if both the halves are equal (barring the middle element in a list with odd elements).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=palindrome-linked-list-using-reverse.cpp\"\n  }), \"ListNode *reverseList(ListNode *head) {\\n    ListNode *prev = NULL, *curr = head, *next = NULL;\\n\\n    while (curr) {\\n        next = curr->next;\\n        curr->next = prev;\\n        prev = curr;\\n        curr = next;\\n    }\\n\\n    return prev;\\n}\\n\\nbool isPalindrome(ListNode *head) {\\n    ListNode *slow = head, *fast = head;\\n    ListNode *mid = NULL;\\n\\n    // return true if only one node\\n    if (head->next == NULL) return true;\\n\\n    while (fast && fast->next) {\\n        fast = fast->next->next;\\n        mid = slow;\\n        slow = slow->next;\\n    }\\n\\n    if (fast) slow = slow->next;\\n\\n    slow = reverseList(slow);\\n\\n    while (slow && head) {\\n        if (slow->val != head->val) return false;\\n        slow = slow->next;\\n        head = head->next;\\n    }\\n\\n    return true;\\n}\\n\")), mdx(\"p\", null, \"The complexity of this approach is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" time and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(1)\"), \" space.\"), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode February Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"17:00 Wow, I've been inactive! Have put on some weight as well but motivated to start this again. It's a new month so let's go with Leetcodeâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/april-1-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}