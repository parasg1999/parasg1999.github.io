{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/jan-29-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/jan-29-daily-programming-diary","title":"Jan 29 - Daily Programming Diary","date":"29.01.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jan 29 - Daily Programming Diary\",\n  \"date\": \"2021-01-29T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"17:00\"), mdx(\"p\", null, \"In Gurgaon now! Let's just quickly solve today's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/featured/card/january-leetcoding-challenge-2021/583/week-5-january-29th-january-31st/3621/\"\n  }), \"Leetcode challenge\"), \".\"), mdx(\"p\", null, \"This seems to be more of a implementation problem that the concept. I'll make a map that maps \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" coordinate to the \\\"map that maps the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" coordinate to the node value\\\".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=vertical-order-traversal-of-a-binary-tree\"\n  }), \"map<int, map<int, set<int>>> m;\\n\\nvoid traverse(TreeNode *root, int x, int y) {\\n    if (root == NULL) {\\n        return;\\n    }\\n\\n    m[x][y].insert(root->val);\\n\\n    traverse(root->left, x - 1, y + 1);\\n    traverse(root->right, x + 1, y + 1);\\n}\\n\\nvector<vector<int>> verticalTraversal(TreeNode *root) {\\n    traverse(root, 0, 0);\\n\\n    vector<vector<int>> v;\\n\\n    for (auto a : m) {\\n        vector<int> wow;\\n        for (auto b : a.second) {\\n            set<int> temp = b.second;\\n            wow.insert(wow.end(), temp.begin(), temp.end());\\n        }\\n        v.push_back(wow);\\n    }\\n\\n    return v;\\n}\\n\")), mdx(\"p\", null, \"The time complexity is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(N)\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"N\"), \" is the number of nodes, and space complexity is also \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(N)\")), mdx(\"p\", null, \"Samsung test tomorrow, all the best Paras!\"), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode January Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"17:00 In Gurgaon now! Let's just quickly solve today's  Leetcode challenge . This seems to be more of a implementation problem that theâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/jan-29-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}