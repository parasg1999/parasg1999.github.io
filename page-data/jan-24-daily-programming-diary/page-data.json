{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/jan-24-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/jan-24-daily-programming-diary","title":"Jan 24 - Daily Programming Diary","date":"24.01.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jan 24 - Daily Programming Diary\",\n  \"date\": \"2021-01-24T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"14:00\"), mdx(\"p\", null, \"I'm feeling bored and I think I should work on something. Yesterday we discussed about implementing a feature so that people could post testimonials about the event that they attended. While the meeting is schedules to take place at night, I think I should get started with it.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hurdle 1 - \"), \" The Admin Pages are broken. There is an error which is making the components which rely on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ProtectedRouteAdmin />\"), \" not being able to render properly.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"After banging my head on the wall for 30 minutes, I figured out the error, the props! The component was being passed as render prop and not as a component which complicated stuff for the route handler. \"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Hurdle 2 -\"), \" The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-slick\"), \" is working in a very weird manner. There seems to be a property bug and since I didn't implement the feature, I'm not even able to figure out the code. But I guess that's the most important part of being a developer. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Understanding code written by other people, optimizing it, and making great stuff with it.\"), \" I have been in support of creating a documentation since day 1 and now I feel that it is strongly required.\"), mdx(\"h5\", null, \"16:00\"), mdx(\"p\", null, \"I finally got to implementing the testimonials feature. Pretty straightforward if you ask me. Create a map, store the UID with their testimonial and we are done.\"), mdx(\"h5\", null, \"17:00\"), mdx(\"p\", null, \"Done with that. Wow, that was fast! \"), mdx(\"p\", null, \"Time for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/featured/card/january-leetcoding-challenge-2021/582/week-4-january-22nd-january-28th/3615/\"\n  }), \"Leetcode challenge\"), \". I have never worked on a problem like this since I always thought that it requires a lot of knowledge but here I am, trying to figure out a way to solve this question.\"), mdx(\"p\", null, \"The first approach I can think of is to combine two lists and then two, and so on.\\nOkay, that seems to simplify the problem a bit. Writing the code for merging two lists doesn't seem to be that big a problem.\"), mdx(\"p\", null, \"Now what?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Well, now I have to figure out a way to merge lists one by one. Let's say I have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" lists.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Merge\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Nodes left\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1 and n\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1 to n-1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2 and n-1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1 to n-2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3 and n-2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1 to n-3\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"...\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"...\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1 and n/2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1 to (n/2) - 1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"...\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"...\")))), mdx(\"p\", null, \"That looks great. So merge the lists one by one using 2 pointers, then when 2\", mdx(\"sup\", null, \"nd\"), \" pointer gets lesser than 1\", mdx(\"sup\", null, \"st\"), \", change 1\", mdx(\"sup\", null, \"st\"), \" to 0.\"), mdx(\"p\", null, \"And that works! Nice! Woah!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=merge-k-sorted-lists.cpp\"\n  }), \"ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {\\n    if (!l1) return l2;\\n    if (!l2) return l1;\\n\\n    ListNode *head = new ListNode();\\n    ListNode *ans = head;\\n\\n    while (l1 != NULL && l2 != NULL) {\\n        if (l1->val < l2->val) {\\n            head->next = l1;\\n            l1 = l1->next;\\n            head = head->next;\\n        } else {\\n            head->next = l2;\\n            l2 = l2->next;\\n            head = head->next;\\n        }\\n    }\\n\\n    if (l1 == NULL) {\\n        head->next = l2;\\n    } else {\\n        head->next = l1;\\n    }\\n\\n    return ans->next;\\n}\\n\\nListNode *mergeKLists(vector<ListNode *> &lists)\\n{\\n    int i = 0, j = lists.size() - 1;\\n\\n    if (lists.size() == 0) return NULL;\\n\\n    while (i < j) {\\n        lists[i] = mergeTwoLists(lists[i], lists[j]);\\n        i++;\\n        j--;\\n        if (i >= j) {\\n            if (j == 0)\\n                return lists[0];\\n            i = 0;\\n        }\\n    }\\n    return lists[0];\\n}\\n\")), mdx(\"h5\", null, \"19:00\"), mdx(\"p\", null, \"The meeting got cancelled, so I guess I don't have much work to do.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Going out, not working anymore!\")), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode January Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Raahee\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"14:00 I'm feeling bored and I think I should work on something. Yesterday we discussed about implementing a feature so that people couldâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/jan-24-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}