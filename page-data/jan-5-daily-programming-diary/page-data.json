{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/jan-5-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/jan-5-daily-programming-diary","title":"Jan 5 - Daily Programming Diary","date":"05.01.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jan 5 - Daily Programming Diary\",\n  \"date\": \"2021-01-05T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"12:30\"), mdx(\"p\", null, \"I completed the Question 5 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.codechef.com/JAN21C/problems/WIPL\"\n  }), \"WIPL\"), \" on Codechef last night but was too tired to write here.\"), mdx(\"p\", null, \"The concept was to try and take minimum boxes first that can make a stack on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2*k\"), \" size and check if we can make individual stacks from those.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The solution can be found at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.codechef.com/viewsolution/41276886\"\n  }), \"41276886\"), \".\"), mdx(\"p\", null, \"Also got 30 points in Question 6 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.codechef.com/JAN21C/problems/ANTSCHEF\"\n  }), \"ANTSCHEF\"), \". Just had to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"long long\"), \" for the result from yesterday.\"), mdx(\"h5\", null, \"16:30\"), mdx(\"p\", null, \"Leetcode January Challenge \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/featured/card/january-leetcoding-challenge-2021/579/week-1-january-1st-january-7th/3593/\"\n  }), \"Day 5\"), \". Starting now!\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The question is pretty simple. Just have to check the next and prev values to ensure that current element is not duplicate. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=remove-duplicates-from-sorted-list-ii.cpp\"\n  }), \"ListNode *deleteDuplicates(ListNode *head) {\\n    if (!head) return head;\\n\\n    ListNode *ans = new ListNode(-1000);\\n    ListNode *temp = ans;\\n    int prev = -1000;\\n    while (head->next != NULL) {\\n        if (head->val != prev && head->val != head->next->val) {\\n            ans->next = head;\\n            ans = ans->next;\\n        }\\n\\n        prev = head->val;\\n        head = head->next;\\n    }\\n\\n    if (head->val == prev) {\\n        ans->next = NULL;\\n    } else {\\n        ans->next = head;\\n    }\\n\\n    return temp->next;\\n}\\n\")), mdx(\"p\", null, \"Time complexity O(n), space complexity O(1).\"), mdx(\"h5\", null, \"20:30\"), mdx(\"p\", null, \"Have to work on Raahee feture tomorrow for demo on 7th. Getting the report feature ready is a large task considering the time I have.\\nIn any case, not feeling like working anymore today. So I'll get back tomorrow.\"), mdx(\"p\", null, \"Also, this blog needs a feature for me to write something and only show when I'm logged in. I mean, what if I want to write about my feelings? Gonna do that after completing the Raahee features.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Sayonara!\")), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Go\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode January Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Codechef Long Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"Raahee\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog \")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"12:30 I completed the Question 5  WIPL  on Codechef last night but was too tired to write here. The concept was to try and take minimumâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/jan-5-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}