{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/feb-15-daily-programming-diary","result":{"data":{"post":{"__typename":"MdxPost","slug":"/feb-15-daily-programming-diary","title":"Feb 15 - Daily Programming Diary","date":"15.02.2021","tags":[{"name":"Diary","slug":"diary"},{"name":"Programming","slug":"programming"}],"description":null,"canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Feb 15 - Daily Programming Diary\",\n  \"date\": \"2021-02-15T00:00:00.000Z\",\n  \"tags\": [\"Diary\", \"Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h5\", null, \"2:00\"), mdx(\"p\", null, \"This seems to be getting a lot infrequent but I started learning Kotlin for Android Development. For now, let's complete the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/challenge/card/february-leetcoding-challenge-2021/585/week-2-february-8th-february-14th/3639/\"\n  }), \"Leetcode Challenge\"), \". THe question is a graph coloring problem where the two in an edge have to be of different colors.\"), mdx(\"p\", null, \"The question has a very straightforward approach. Pick a node, color it with one of the colors, and paint its neighbors with the other color, and continue this till all the nodes are colored. If by any change the graph is a disconnected one, check for the queue empty condition and see if there are any unvisited nodes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=is-graph-bipartite.cpp\"\n  }), \"bool isBipartite(vector<vector<int>> &graph) {\\n    vector<int> m(graph.size(), -1);\\n\\n    m[0] = 1;\\n    queue<int> q;\\n    q.push(0);\\n\\n    while (!q.empty()) {\\n        int u = q.front();\\n        q.pop();\\n\\n        for (auto a : graph[u]) {\\n            if (m[a] == -1) {\\n                m[a] = 1 - m[u];\\n                q.push(a);\\n            } else if (m[a] == m[u]) return false;\\n        }\\n\\n        if (q.empty()) {\\n            for (int i = 0; i < m.size(); i++) {\\n                if (m[i] == -1) {\\n                    m[i] = 1;\\n                    q.push(i);\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    return true;\\n}\\n\")), mdx(\"p\", null, \"Time complexity \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \" is the number of nodes in the graph. Space complexity is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(n)\"), \" if the first node connects to all the other nodes.\"), mdx(\"h5\", null, \"5:00\"), mdx(\"p\", null, \"Since my root partition in Ubuntu was running out of disk space and was causing a lot of issues, I had to reinstall Ubuntu. So I backed up all the important config files to get started ASAP. \"), mdx(\"p\", null, \"I am thinking about creating a git repository with all the necessary files, so that I can get started even if I don't have the backup physically available.\"), mdx(\"h5\", null, \"7:00\"), mdx(\"p\", null, \"The setup procedure of Android studio took a while with all the installing that had to be done. But finally it is working and I can start by learning the syntax of Kotlin and then making some basic stuff. What I would love though is making a replica of SayInEditor with Kotlin. \"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Time for some sleep!\")), mdx(\"h5\", null, \"13:00\"), mdx(\"p\", null, \"I have to make a Schedule section for the HackOn website and the design was given by haxzie this morning only. Since there is no schedule currently, this section won't be published right away and I have a lot of time to get it done.\"), mdx(\"p\", null, \"Let's start and see what issues arise. The most important thing that I have learned while working on this project is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dispaly: flex\"), \" and probably will never forget it, so that's a good thing.\"), mdx(\"h5\", null, \"14:00\"), mdx(\"p\", null, \"I am done with the basic UI for the section but still have to make it responsive. The only issue right now is that the design will not look very good on mobile devices. So I'm thinking about removing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"more details\"), \" button on mobile phones and making the image smaller. \"), mdx(\"p\", null, \"For now, I'll push it in a separate branch since it is not required until the schedule is decided.\"), mdx(\"h5\", null, \"20:00\"), mdx(\"p\", null, \"Back to work! I think it's time to take a look at today's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/explore/challenge/card/february-leetcoding-challenge-2021/586/week-3-february-15th-february-21st/3641/\"\n  }), \"Leetcode challenge\"), \".\"), mdx(\"p\", null, \"The approach is just counting the number of ones in each row and the inserting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pair<ones, index>\"), \" in the min heap. After that, all that's left to do is to get k minimum elements from the heap.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp:title=k-weakest-rows.cpp\"\n  }), \"vector<int> kWeakestRows(vector<vector<int>> &mat, int k) {\\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n\\n    for (int i = 0; i < mat.size(); i++) {\\n        int ones = 0;\\n        for (auto j : mat[i]) {\\n            if (j == 1) ones++;\\n            else break;\\n        }\\n        pq.push(make_pair(ones, i));\\n    }\\n\\n    vector<int> ans;\\n    while (k--) {\\n        pair<int, int> tp = pq.top();\\n        ans.push_back(tp.second);\\n        pq.pop();\\n    }\\n\\n    return ans;\\n}\\n\")), mdx(\"p\", null, \"Time complexity \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(m*n)\"), \" where m and n are the number of rows and solumns respectively. Space complexity is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"O(m)\"), \" to store in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority_queue\"), \". \"), mdx(\"h5\", null, \"21:00\"), mdx(\"p\", null, \"Made the Hackon Website Schedule section responsive and pushed. Will have to deploy on netlify manually.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Good night!\")), mdx(\"h3\", null, \"EOD Checklist\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Leetcode February Challenge\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"This blog\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"2:00 This seems to be getting a lot infrequent but I started learning Kotlin for Android Development. For now, let's complete the  Leetcodeâ€¦","timeToRead":2,"banner":null}},"pageContext":{"slug":"/feb-15-daily-programming-diary","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}